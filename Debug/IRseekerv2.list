
IRseekerv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b0  080036b0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036b8  080036b8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080036c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000003c  080036fc  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080036fc  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010eda  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002200  00000000  00000000  00030f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00033190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c49  00000000  00000000  00034140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d58e  00000000  00000000  00034d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113fe  00000000  00000000  00052317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2070  00000000  00000000  00063715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042b8  00000000  00000000  00125788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00129a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000003c 	.word	0x2000003c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003658 	.word	0x08003658

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000040 	.word	0x20000040
 8000214:	08003658 	.word	0x08003658

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <reset_inputs>:
uint32_t ADCValueFiltered = 0;
FilterTypeDef filterStruct;



void reset_inputs(){
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
	for(int i=0;i<12;i++){
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	e007      	b.n	8000530 <reset_inputs+0x1c>
		inputs[i] = 0;
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <reset_inputs+0x30>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2100      	movs	r1, #0
 8000526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<12;i++){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b0b      	cmp	r3, #11
 8000534:	ddf4      	ble.n	8000520 <reset_inputs+0xc>
	}
}
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	200001c8 	.word	0x200001c8

08000548 <read_inputs>:
void read_inputs(){
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0

	uwTick = 0;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <read_inputs+0x78>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]


	while(uwTick <4){
 8000554:	e028      	b.n	80005a8 <read_inputs+0x60>
		uint32_t value =  (GPIOB->IDR & 0b0001111011111111);
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <read_inputs+0x7c>)
 8000558:	691a      	ldr	r2, [r3, #16]
 800055a:	f641 63ff 	movw	r3, #7935	; 0x1eff
 800055e:	4013      	ands	r3, r2
 8000560:	603b      	str	r3, [r7, #0]

		for(int i=0;i<12;i++){
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e01c      	b.n	80005a2 <read_inputs+0x5a>

			inputs[i] += 1 - ((value & (1 << masks[i])) >> masks[i]);
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <read_inputs+0x80>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000570:	4916      	ldr	r1, [pc, #88]	; (80005cc <read_inputs+0x84>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000578:	2101      	movs	r1, #1
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	4619      	mov	r1, r3
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	4019      	ands	r1, r3
 8000584:	4811      	ldr	r0, [pc, #68]	; (80005cc <read_inputs+0x84>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800058c:	fa21 f303 	lsr.w	r3, r1, r3
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	490c      	ldr	r1, [pc, #48]	; (80005c8 <read_inputs+0x80>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0;i<12;i++){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0b      	cmp	r3, #11
 80005a6:	dddf      	ble.n	8000568 <read_inputs+0x20>
	while(uwTick <4){
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <read_inputs+0x78>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d9d2      	bls.n	8000556 <read_inputs+0xe>
		}
	}

}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000390 	.word	0x20000390
 80005c4:	48000400 	.word	0x48000400
 80005c8:	200001c8 	.word	0x200001c8
 80005cc:	20000000 	.word	0x20000000

080005d0 <find_max>:

uint8_t find_max(){
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0



	uint8_t c = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]
	uint32_t current_max = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0;i<12;i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	e011      	b.n	8000608 <find_max+0x38>

		if(inputs[i] > current_max){
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4a0d      	ldr	r2, [pc, #52]	; (800061c <find_max+0x4c>)
 80005e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d207      	bcs.n	8000602 <find_max+0x32>
			c = i+1;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3301      	adds	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
			current_max = inputs[i];
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <find_max+0x4c>)
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0;i<12;i++){
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3301      	adds	r3, #1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b0b      	cmp	r3, #11
 800060c:	d9ea      	bls.n	80005e4 <find_max+0x14>

		}
	}

	return c;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	200001c8 	.word	0x200001c8

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/*for(int i = 0;i < NUM_READING; i ++){
		adc_readings[i] = 0;
	}*/
	Moving_Average_Init(&filterStruct);
 8000626:	482b      	ldr	r0, [pc, #172]	; (80006d4 <main+0xb4>)
 8000628:	f000 fa03 	bl	8000a32 <Moving_Average_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fba5 	bl	8000d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f85a 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f990 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f8f6 	bl	8000828 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800063c:	f000 f940 	bl	80008c0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000640:	f000 f89e 	bl	8000780 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	4823      	ldr	r0, [pc, #140]	; (80006d8 <main+0xb8>)
 800064a:	f000 fe8f 	bl	800136c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800064e:	20c8      	movs	r0, #200	; 0xc8
 8000650:	f000 fc04 	bl	8000e5c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	481f      	ldr	r0, [pc, #124]	; (80006d8 <main+0xb8>)
 800065a:	f000 fe87 	bl	800136c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800065e:	20c8      	movs	r0, #200	; 0xc8
 8000660:	f000 fbfc 	bl	8000e5c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	481b      	ldr	r0, [pc, #108]	; (80006d8 <main+0xb8>)
 800066a:	f000 fe7f 	bl	800136c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800066e:	20c8      	movs	r0, #200	; 0xc8
 8000670:	f000 fbf4 	bl	8000e5c <HAL_Delay>
  uint32_t t = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  for(int x = 0;x<12;x++){
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	e00d      	b.n	800069a <main+0x7a>
	  t += 1 << masks[x];
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <main+0xbc>)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000686:	2201      	movs	r2, #1
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	461a      	mov	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  for(int x = 0;x<12;x++){
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	3301      	adds	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	2b0b      	cmp	r3, #11
 800069e:	ddee      	ble.n	800067e <main+0x5e>
  }
  while (1)
  {
	  	reset_inputs();
 80006a0:	f7ff ff38 	bl	8000514 <reset_inputs>
	  	read_inputs();
 80006a4:	f7ff ff50 	bl	8000548 <read_inputs>

	  	//uint8_t current_average_position = calculate_average(current_position);
	  	uint8_t current_position = find_max();
 80006a8:	f7ff ff92 	bl	80005d0 <find_max>
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
	  	uint8_t current_average_position = (uint8_t)Moving_Average_Compute((uint32_t)current_position, &filterStruct);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <main+0xb4>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f9dd 	bl	8000a74 <Moving_Average_Compute>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71bb      	strb	r3, [r7, #6]
	  	result[0] = current_average_position;
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <main+0xc0>)
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	7013      	strb	r3, [r2, #0]


		//result[1] = (value & 0x0000ff00) >> 8;
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  	//uint32_t tmilis =  HAL_GetTick();//TIM1->CNT;
	  	HAL_UART_Transmit(&huart2,result,sizeof(result),10);// Sending in normal mode
 80006c4:	230a      	movs	r3, #10
 80006c6:	2201      	movs	r2, #1
 80006c8:	4905      	ldr	r1, [pc, #20]	; (80006e0 <main+0xc0>)
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <main+0xc4>)
 80006cc:	f002 f97e 	bl	80029cc <HAL_UART_Transmit>
  {
 80006d0:	e7e6      	b.n	80006a0 <main+0x80>
 80006d2:	bf00      	nop
 80006d4:	200001f8 	.word	0x200001f8
 80006d8:	48000800 	.word	0x48000800
 80006dc:	20000000 	.word	0x20000000
 80006e0:	200001c4 	.word	0x200001c4
 80006e4:	200000a4 	.word	0x200000a4

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	2238      	movs	r2, #56	; 0x38
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 ff82 	bl	8003600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070e:	f000 fe45 	bl	800139c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000728:	2301      	movs	r3, #1
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800072c:	230c      	movs	r3, #12
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fecf 	bl	80014e4 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800074c:	f000 f96c 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2303      	movs	r3, #3
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2103      	movs	r1, #3
 8000768:	4618      	mov	r0, r3
 800076a:	f001 f9d3 	bl	8001b14 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000774:	f000 f958 	bl	8000a28 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	; 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <MX_TIM1_Init+0xa4>)
 80007a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007a6:	225f      	movs	r2, #95	; 0x5f
 80007a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007cc:	f001 fdae 	bl	800232c <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007d6:	f000 f927 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007e8:	f001 fdf8 	bl	80023dc <HAL_TIM_ConfigClockSource>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007f2:	f000 f919 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_TIM1_Init+0xa0>)
 8000808:	f002 f80e 	bl	8002828 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000812:	f000 f909 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000058 	.word	0x20000058
 8000824:	40012c00 	.word	0x40012c00

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_USART2_UART_Init+0x94>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000870:	4811      	ldr	r0, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000872:	f002 f85b 	bl	800292c <HAL_UART_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800087c:	f000 f8d4 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000884:	f002 fdf2 	bl	800346c <HAL_UARTEx_SetTxFifoThreshold>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800088e:	f000 f8cb 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4808      	ldr	r0, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 8000896:	f002 fe27 	bl	80034e8 <HAL_UARTEx_SetRxFifoThreshold>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008a0:	f000 f8c2 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_USART2_UART_Init+0x90>)
 80008a6:	f002 fda8 	bl	80033fa <HAL_UARTEx_DisableFifoMode>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008b0:	f000 f8ba 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000a4 	.word	0x200000a4
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <MX_USART3_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800090a:	f002 f80f 	bl	800292c <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f888 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800091c:	f002 fda6 	bl	800346c <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f87f 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800092e:	f002 fddb 	bl	80034e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f876 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800093e:	f002 fd5c 	bl	80033fa <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f86e 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000134 	.word	0x20000134
 8000954:	40004800 	.word	0x40004800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <MX_GPIO_Init+0xc4>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_GPIO_Init+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <MX_GPIO_Init+0xc4>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_GPIO_Init+0xc4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_GPIO_Init+0xc4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <MX_GPIO_Init+0xc4>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_GPIO_Init+0xc4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_GPIO_Init+0xc4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <MX_GPIO_Init+0xc4>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_GPIO_Init+0xc4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MX_GPIO_Init+0xc8>)
 80009d6:	f000 fcc9 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 80009da:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <MX_GPIO_Init+0xc8>)
 80009f4:	f000 fb38 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB3 PB4
                           PB5 PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80009f8:	f641 63ff 	movw	r3, #7935	; 0x1eff
 80009fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_GPIO_Init+0xcc>)
 8000a0e:	f000 fb2b 	bl	8001068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800
 8000a24:	48000400 	.word	0x48000400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>

08000a32 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b085      	sub	sp, #20
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	filter_struct->Sum = 0;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	filter_struct->WindowPointer = 0;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	for(uint32_t i=0; i<WindowLength; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e007      	b.n	8000a60 <Moving_Average_Init+0x2e>
	{
		filter_struct->History[i] = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	2100      	movs	r1, #0
 8000a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<WindowLength; i++)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b63      	cmp	r3, #99	; 0x63
 8000a64:	d9f4      	bls.n	8000a50 <Moving_Average_Init+0x1e>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
uint32_t Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	441a      	add	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000aa0:	1ad2      	subs	r2, r2, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(filter_struct->WindowPointer < WindowLength - 1)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000abc:	2b62      	cmp	r3, #98	; 0x62
 8000abe:	d807      	bhi.n	8000ad0 <Moving_Average_Compute+0x5c>
	{
		filter_struct->WindowPointer += 1;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8000ace:	e003      	b.n	8000ad8 <Moving_Average_Compute+0x64>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	}
	return filter_struct->Sum/WindowLength;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <Moving_Average_Compute+0x80>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	095b      	lsrs	r3, r3, #5
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	51eb851f 	.word	0x51eb851f

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_TIM_Base_MspInit+0x38>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d10b      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_TIM_Base_MspInit+0x3c>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <HAL_TIM_Base_MspInit+0x3c>)
 8000b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_TIM_Base_MspInit+0x3c>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09c      	sub	sp, #112	; 0x70
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	2244      	movs	r2, #68	; 0x44
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 fd2d 	bl	8003600 <memset>
  if(huart->Instance==USART2)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a3d      	ldr	r2, [pc, #244]	; (8000ca0 <HAL_UART_MspInit+0x120>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d137      	bne.n	8000c20 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 f9c5 	bl	8001f4c <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc8:	f7ff ff2e 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be8:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f000 fa25 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1e:	e03b      	b.n	8000c98 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <HAL_UART_MspInit+0x128>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d136      	bne.n	8000c98 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 f988 	bl	8001f4c <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000c42:	f7ff fef1 	bl	8000a28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_UART_MspInit+0x124>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <HAL_UART_MspInit+0x12c>)
 8000c94:	f000 f9e8 	bl	8001068 <HAL_GPIO_Init>
}
 8000c98:	bf00      	nop
 8000c9a:	3770      	adds	r7, #112	; 0x70
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	48000800 	.word	0x48000800

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f890 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 fc5b 	bl	8003610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fc61 	bl	8000620 <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   r0, =_estack
 8000d60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000d6c:	080036c0 	.word	0x080036c0
  ldr r2, =_sbss
 8000d70:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000d74:	20000394 	.word	0x20000394

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>

08000d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f93d 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f80e 	bl	8000dac <HAL_InitTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	e001      	b.n	8000da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9c:	f7ff feac 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da0:	79fb      	ldrb	r3, [r7, #7]

}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_InitTick+0x68>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d022      	beq.n	8000e06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_InitTick+0x6c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_InitTick+0x68>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f93a 	bl	800104e <HAL_SYSTICK_Config>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10f      	bne.n	8000e00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d809      	bhi.n	8000dfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	2200      	movs	r2, #0
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dee:	f000 f914 	bl	800101a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_InitTick+0x70>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e004      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e001      	b.n	8000e0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000038 	.word	0x20000038
 8000e18:	20000030 	.word	0x20000030
 8000e1c:	20000034 	.word	0x20000034

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x20>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <HAL_IncTick+0x1c>)
 8000e30:	6013      	str	r3, [r2, #0]
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	20000390 	.word	0x20000390
 8000e40:	20000038 	.word	0x20000038

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000390 	.word	0x20000390

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e74:	d004      	beq.n	8000e80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_Delay+0x40>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e80:	bf00      	nop
 8000e82:	f7ff ffdf 	bl	8000e44 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d8f7      	bhi.n	8000e82 <HAL_Delay+0x26>
  {
  }
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000038 	.word	0x20000038

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff47 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb2 	bl	8000fc0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001076:	e15a      	b.n	800132e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 814c 	beq.w	8001328 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d005      	beq.n	80010a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	f003 0201 	and.w	r2, r3, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b03      	cmp	r3, #3
 8001114:	d017      	beq.n	8001146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d123      	bne.n	800119a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	6939      	ldr	r1, [r7, #16]
 8001196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0203 	and.w	r2, r3, #3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80a6 	beq.w	8001328 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011dc:	4b5b      	ldr	r3, [pc, #364]	; (800134c <HAL_GPIO_Init+0x2e4>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_GPIO_Init+0x2e4>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6613      	str	r3, [r2, #96]	; 0x60
 80011e8:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_GPIO_Init+0x2e4>)
 80011ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f4:	4a56      	ldr	r2, [pc, #344]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800121e:	d01f      	beq.n	8001260 <HAL_GPIO_Init+0x1f8>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d019      	beq.n	800125c <HAL_GPIO_Init+0x1f4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x2f0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_GPIO_Init+0x1f0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_GPIO_Init+0x2f4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00d      	beq.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_GPIO_Init+0x2f8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d007      	beq.n	8001250 <HAL_GPIO_Init+0x1e8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a48      	ldr	r2, [pc, #288]	; (8001364 <HAL_GPIO_Init+0x2fc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_GPIO_Init+0x1e4>
 8001248:	2305      	movs	r3, #5
 800124a:	e00a      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 800124c:	2306      	movs	r3, #6
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001250:	2304      	movs	r3, #4
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001254:	2303      	movs	r3, #3
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001260:	2300      	movs	r3, #0
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001272:	4937      	ldr	r1, [pc, #220]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001280:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_GPIO_Init+0x300>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a4:	4a30      	ldr	r2, [pc, #192]	; (8001368 <HAL_GPIO_Init+0x300>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <HAL_GPIO_Init+0x300>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ce:	4a26      	ldr	r2, [pc, #152]	; (8001368 <HAL_GPIO_Init+0x300>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_GPIO_Init+0x300>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f8:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <HAL_GPIO_Init+0x300>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_GPIO_Init+0x300>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_GPIO_Init+0x300>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	f47f ae9d 	bne.w	8001078 <HAL_GPIO_Init+0x10>
  }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	48001000 	.word	0x48001000
 8001364:	48001400 	.word	0x48001400
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001388:	e002      	b.n	8001390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d141      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b6:	d131      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013be:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013d0:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2232      	movs	r2, #50	; 0x32
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9b      	lsrs	r3, r3, #18
 80013ea:	3301      	adds	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ee:	e002      	b.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001402:	d102      	bne.n	800140a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f2      	bne.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d158      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e057      	b.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800142c:	e04d      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001434:	d141      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001442:	d131      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001462:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2232      	movs	r2, #50	; 0x32
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147a:	e002      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148e:	d102      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f2      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d112      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e011      	b.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014b8:	e007      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40007000 	.word	0x40007000
 80014dc:	20000030 	.word	0x20000030
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e306      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d075      	beq.n	80015ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001502:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150c:	4b94      	ldr	r3, [pc, #592]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d102      	bne.n	8001522 <HAL_RCC_OscConfig+0x3e>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d002      	beq.n	8001528 <HAL_RCC_OscConfig+0x44>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d10b      	bne.n	8001540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	4b8d      	ldr	r3, [pc, #564]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d05b      	beq.n	80015ec <HAL_RCC_OscConfig+0x108>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d157      	bne.n	80015ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e2e1      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d106      	bne.n	8001558 <HAL_RCC_OscConfig+0x74>
 800154a:	4b85      	ldr	r3, [pc, #532]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a84      	ldr	r2, [pc, #528]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e01d      	b.n	8001594 <HAL_RCC_OscConfig+0xb0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x98>
 8001562:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7e      	ldr	r2, [pc, #504]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b7c      	ldr	r3, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7b      	ldr	r2, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0xb0>
 800157c:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a77      	ldr	r2, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a74      	ldr	r2, [pc, #464]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fc52 	bl	8000e44 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fc4e 	bl	8000e44 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e2a6      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0xc0>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc3e 	bl	8000e44 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fc3a 	bl	8000e44 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e292      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0xe8>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d075      	beq.n	80016e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fa:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001604:	4b56      	ldr	r3, [pc, #344]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b0c      	cmp	r3, #12
 8001612:	d102      	bne.n	800161a <HAL_RCC_OscConfig+0x136>
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d002      	beq.n	8001620 <HAL_RCC_OscConfig+0x13c>
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d11f      	bne.n	8001660 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x154>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e265      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b49      	ldr	r3, [pc, #292]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	4946      	ldr	r1, [pc, #280]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800164c:	4b45      	ldr	r3, [pc, #276]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fbab 	bl	8000dac <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d043      	beq.n	80016e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e251      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d023      	beq.n	80016b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a3c      	ldr	r2, [pc, #240]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fbe6 	bl	8000e44 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fbe2 	bl	8000e44 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e23a      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	061b      	lsls	r3, r3, #24
 80016a8:	492d      	ldr	r1, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
 80016ae:	e01a      	b.n	80016e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2a      	ldr	r2, [pc, #168]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fbc2 	bl	8000e44 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fbbe 	bl	8000e44 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e216      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1e0>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d041      	beq.n	8001776 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01c      	beq.n	8001734 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fb9b 	bl	8000e44 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fb97 	bl	8000e44 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1ef      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ef      	beq.n	8001712 <HAL_RCC_OscConfig+0x22e>
 8001732:	e020      	b.n	8001776 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fb7e 	bl	8000e44 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174a:	e00d      	b.n	8001768 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fb7a 	bl	8000e44 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d906      	bls.n	8001768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1d2      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	4b8c      	ldr	r3, [pc, #560]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ea      	bne.n	800174c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a6 	beq.w	80018d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001788:	4b84      	ldr	r3, [pc, #528]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x2b4>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x2b6>
 8001798:	2300      	movs	r3, #0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b7f      	ldr	r3, [pc, #508]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	4a7e      	ldr	r2, [pc, #504]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
 80017aa:	4b7c      	ldr	r3, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	4b79      	ldr	r3, [pc, #484]	; (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c6:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a75      	ldr	r2, [pc, #468]	; (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fb37 	bl	8000e44 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fb33 	bl	8000e44 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e18b      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_RCC_OscConfig+0x32e>
 8001800:	4b66      	ldr	r3, [pc, #408]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	4a65      	ldr	r2, [pc, #404]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001810:	e024      	b.n	800185c <HAL_RCC_OscConfig+0x378>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d110      	bne.n	800183c <HAL_RCC_OscConfig+0x358>
 800181a:	4b60      	ldr	r3, [pc, #384]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	4a5e      	ldr	r2, [pc, #376]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	4a5a      	ldr	r2, [pc, #360]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183a:	e00f      	b.n	800185c <HAL_RCC_OscConfig+0x378>
 800183c:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	4a56      	ldr	r2, [pc, #344]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001852:	4a52      	ldr	r2, [pc, #328]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d016      	beq.n	8001892 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff faee 	bl	8000e44 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff faea 	bl	8000e44 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e140      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ed      	beq.n	800186c <HAL_RCC_OscConfig+0x388>
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fad7 	bl	8000e44 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fad3 	bl	8000e44 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e129      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ed      	bne.n	800189a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	4a34      	ldr	r2, [pc, #208]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03c      	beq.n	8001956 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01c      	beq.n	800191e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ea:	4a2c      	ldr	r2, [pc, #176]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff faa6 	bl	8000e44 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fc:	f7ff faa2 	bl	8000e44 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0fa      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ef      	beq.n	80018fc <HAL_RCC_OscConfig+0x418>
 800191c:	e01b      	b.n	8001956 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001924:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fa89 	bl	8000e44 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001936:	f7ff fa85 	bl	8000e44 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0dd      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ef      	bne.n	8001936 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80d1 	beq.w	8001b02 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b0c      	cmp	r3, #12
 800196a:	f000 808b 	beq.w	8001a84 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d15e      	bne.n	8001a34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_RCC_OscConfig+0x4b8>)
 800197c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff fa5f 	bl	8000e44 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	e00c      	b.n	80019a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff fa5b 	bl	8000e44 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d905      	bls.n	80019a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0b3      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ec      	bne.n	800198a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <HAL_RCC_OscConfig+0x62c>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6a11      	ldr	r1, [r2, #32]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019c0:	3a01      	subs	r2, #1
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019ca:	0212      	lsls	r2, r2, #8
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019d2:	0852      	lsrs	r2, r2, #1
 80019d4:	3a01      	subs	r2, #1
 80019d6:	0552      	lsls	r2, r2, #21
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0652      	lsls	r2, r2, #25
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019ea:	06d2      	lsls	r2, r2, #27
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4947      	ldr	r1, [pc, #284]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a44      	ldr	r2, [pc, #272]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a00:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a41      	ldr	r2, [pc, #260]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fa1a 	bl	8000e44 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff fa16 	bl	8000e44 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e06e      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x530>
 8001a32:	e066      	b.n	8001b02 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a31      	ldr	r2, [pc, #196]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f9f2 	bl	8000e44 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f9ee 	bl	8000e44 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e046      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x580>
 8001a82:	e03e      	b.n	8001b02 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e039      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_RCC_OscConfig+0x628>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d12c      	bne.n	8001afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d123      	bne.n	8001afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11b      	bne.n	8001afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d113      	bne.n	8001afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d109      	bne.n	8001afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	019f800c 	.word	0x019f800c

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e11e      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 020f 	bic.w	r2, r3, #15
 8001b42:	498c      	ldr	r1, [pc, #560]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b8a      	ldr	r3, [pc, #552]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e106      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d073      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d129      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b70:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0f4      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b80:	f000 f99e 	bl	8001ec0 <RCC_GetSysClockFreqFromPLLSource>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4a7c      	ldr	r2, [pc, #496]	; (8001d7c <HAL_RCC_ClockConfig+0x268>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d93f      	bls.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d033      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d12f      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb6:	4a70      	ldr	r2, [pc, #448]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e024      	b.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0c6      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0be      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bec:	f000 f8ce 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4a61      	ldr	r2, [pc, #388]	; (8001d7c <HAL_RCC_ClockConfig+0x268>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d909      	bls.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c02:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4957      	ldr	r1, [pc, #348]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c20:	f7ff f910 	bl	8000e44 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff f90c 	bl	8000e44 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e095      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d023      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a42      	ldr	r2, [pc, #264]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c88:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4936      	ldr	r1, [pc, #216]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b80      	cmp	r3, #128	; 0x80
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d21d      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 020f 	bic.w	r2, r3, #15
 8001ccc:	4929      	ldr	r1, [pc, #164]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f8b6 	bl	8000e44 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f8b2 	bl	8000e44 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e03b      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1ed      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4917      	ldr	r1, [pc, #92]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	490f      	ldr	r1, [pc, #60]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d3e:	f000 f825 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	490c      	ldr	r1, [pc, #48]	; (8001d80 <HAL_RCC_ClockConfig+0x26c>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f822 	bl	8000dac <HAL_InitTick>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	04c4b400 	.word	0x04c4b400
 8001d80:	08003670 	.word	0x08003670
 8001d84:	20000030 	.word	0x20000030
 8001d88:	20000034 	.word	0x20000034

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e047      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e03e      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d136      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dea:	68d2      	ldr	r2, [r2, #12]
 8001dec:	0a12      	lsrs	r2, r2, #8
 8001dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
      break;
 8001df8:	e00c      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	0a12      	lsrs	r2, r2, #8
 8001e08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
      break;
 8001e12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0e5b      	lsrs	r3, r3, #25
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e001      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e34:	693b      	ldr	r3, [r7, #16]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	00f42400 	.word	0x00f42400
 8001e4c:	007a1200 	.word	0x007a1200

08001e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000030 	.word	0x20000030

08001e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e6c:	f7ff fff0 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4904      	ldr	r1, [pc, #16]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08003680 	.word	0x08003680

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e98:	f7ff ffda 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0adb      	lsrs	r3, r3, #11
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08003680 	.word	0x08003680

08001ec0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d10c      	bne.n	8001efe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee4:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eee:	68d2      	ldr	r2, [r2, #12]
 8001ef0:	0a12      	lsrs	r2, r2, #8
 8001ef2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
    break;
 8001efc:	e00c      	b.n	8001f18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f08:	68d2      	ldr	r2, [r2, #12]
 8001f0a:	0a12      	lsrs	r2, r2, #8
 8001f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    break;
 8001f16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0e5b      	lsrs	r3, r3, #25
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40021000 	.word	0x40021000
 8001f44:	007a1200 	.word	0x007a1200
 8001f48:	00f42400 	.word	0x00f42400

08001f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f54:	2300      	movs	r3, #0
 8001f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8098 	beq.w	800209a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b40      	ldr	r3, [pc, #256]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a3f      	ldr	r2, [pc, #252]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a39      	ldr	r2, [pc, #228]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa2:	f7fe ff4f 	bl	8000e44 <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe ff4b 	bl	8000e44 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d902      	bls.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	74fb      	strb	r3, [r7, #19]
        break;
 8001fbc:	e005      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ef      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d159      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01e      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d019      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7fe ff0b 	bl	8000e44 <HAL_GetTick>
 800202e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002030:	e00b      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7fe ff07 	bl	8000e44 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d902      	bls.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	74fb      	strb	r3, [r7, #19]
            break;
 8002048:	e006      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ec      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10b      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4903      	ldr	r1, [pc, #12]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002074:	e008      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	74bb      	strb	r3, [r7, #18]
 800207a:	e005      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002088:	7c7b      	ldrb	r3, [r7, #17]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4ba6      	ldr	r3, [pc, #664]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4aa5      	ldr	r2, [pc, #660]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020a6:	4ba0      	ldr	r3, [pc, #640]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ac:	f023 0203 	bic.w	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	499c      	ldr	r1, [pc, #624]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c8:	4b97      	ldr	r3, [pc, #604]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f023 020c 	bic.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4994      	ldr	r1, [pc, #592]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ea:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	498b      	ldr	r1, [pc, #556]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800210c:	4b86      	ldr	r3, [pc, #536]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	4983      	ldr	r1, [pc, #524]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212e:	4b7e      	ldr	r3, [pc, #504]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002134:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	497a      	ldr	r1, [pc, #488]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002150:	4b75      	ldr	r3, [pc, #468]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4972      	ldr	r1, [pc, #456]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002172:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4969      	ldr	r1, [pc, #420]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4961      	ldr	r1, [pc, #388]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021b6:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	4958      	ldr	r1, [pc, #352]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	4950      	ldr	r1, [pc, #320]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f6:	d105      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002202:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002210:	4b45      	ldr	r3, [pc, #276]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	4942      	ldr	r1, [pc, #264]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a3c      	ldr	r2, [pc, #240]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002248:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4934      	ldr	r1, [pc, #208]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002268:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a2e      	ldr	r2, [pc, #184]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002272:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	4926      	ldr	r1, [pc, #152]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a20      	ldr	r2, [pc, #128]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	490a      	ldr	r1, [pc, #40]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800231c:	7cbb      	ldrb	r3, [r7, #18]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e049      	b.n	80023d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fbf4 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f000 f930 	bl	80025d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_TIM_ConfigClockSource+0x1c>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0de      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x1da>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800241a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a63      	ldr	r2, [pc, #396]	; (80025c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	f000 80a9 	beq.w	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 8002438:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	f200 80ae 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 8002440:	4a60      	ldr	r2, [pc, #384]	; (80025c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	f000 80a1 	beq.w	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 8002448:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	f200 80a6 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 8002450:	4a5d      	ldr	r2, [pc, #372]	; (80025c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002452:	4293      	cmp	r3, r2
 8002454:	f000 8099 	beq.w	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 8002458:	4a5b      	ldr	r2, [pc, #364]	; (80025c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800245a:	4293      	cmp	r3, r2
 800245c:	f200 809e 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 8002460:	4a5a      	ldr	r2, [pc, #360]	; (80025cc <HAL_TIM_ConfigClockSource+0x1f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f000 8091 	beq.w	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f200 8096 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 8002470:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002474:	f000 8089 	beq.w	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 8002478:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800247c:	f200 808e 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d03e      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0x128>
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	f200 8087 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	f000 8086 	beq.w	80025a2 <HAL_TIM_ConfigClockSource+0x1c6>
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d87f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 800249c:	2b70      	cmp	r3, #112	; 0x70
 800249e:	d01a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xfa>
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d87b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 80024a4:	2b60      	cmp	r3, #96	; 0x60
 80024a6:	d050      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x16e>
 80024a8:	2b60      	cmp	r3, #96	; 0x60
 80024aa:	d877      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	d03c      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x14e>
 80024b0:	2b50      	cmp	r3, #80	; 0x50
 80024b2:	d873      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d058      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x18e>
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d86f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d064      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 80024c0:	2b30      	cmp	r3, #48	; 0x30
 80024c2:	d86b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d060      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d867      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d05a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x1ae>
 80024d4:	e062      	b.n	800259c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f000 f97f 	bl	80027e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	609a      	str	r2, [r3, #8]
      break;
 8002502:	e04f      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 f968 	bl	80027e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	609a      	str	r2, [r3, #8]
      break;
 8002528:	e03c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f8da 	bl	80026f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2150      	movs	r1, #80	; 0x50
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f933 	bl	80027ae <TIM_ITRx_SetConfig>
      break;
 8002548:	e02c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8f9 	bl	800274e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2160      	movs	r1, #96	; 0x60
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f923 	bl	80027ae <TIM_ITRx_SetConfig>
      break;
 8002568:	e01c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f8ba 	bl	80026f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f913 	bl	80027ae <TIM_ITRx_SetConfig>
      break;
 8002588:	e00c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 f90a 	bl	80027ae <TIM_ITRx_SetConfig>
      break;
 800259a:	e003      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e000      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80025a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	00100070 	.word	0x00100070
 80025c4:	00100040 	.word	0x00100040
 80025c8:	00100030 	.word	0x00100030
 80025cc:	00100020 	.word	0x00100020

080025d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <TIM_Base_SetConfig+0x104>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00f      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d00b      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a39      	ldr	r2, [pc, #228]	; (80026d8 <TIM_Base_SetConfig+0x108>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a38      	ldr	r2, [pc, #224]	; (80026dc <TIM_Base_SetConfig+0x10c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a37      	ldr	r2, [pc, #220]	; (80026e0 <TIM_Base_SetConfig+0x110>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d108      	bne.n	800261a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2d      	ldr	r2, [pc, #180]	; (80026d4 <TIM_Base_SetConfig+0x104>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01b      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d017      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a2a      	ldr	r2, [pc, #168]	; (80026d8 <TIM_Base_SetConfig+0x108>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a29      	ldr	r2, [pc, #164]	; (80026dc <TIM_Base_SetConfig+0x10c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00f      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <TIM_Base_SetConfig+0x110>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00b      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <TIM_Base_SetConfig+0x118>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <TIM_Base_SetConfig+0x11c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d108      	bne.n	800266c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <TIM_Base_SetConfig+0x104>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00f      	beq.n	80026b8 <TIM_Base_SetConfig+0xe8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <TIM_Base_SetConfig+0x110>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00b      	beq.n	80026b8 <TIM_Base_SetConfig+0xe8>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <TIM_Base_SetConfig+0xe8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <TIM_Base_SetConfig+0x118>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_Base_SetConfig+0xe8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <TIM_Base_SetConfig+0x11c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d103      	bne.n	80026c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	615a      	str	r2, [r3, #20]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40013400 	.word	0x40013400
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800

080026f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f023 0201 	bic.w	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800271a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f023 030a 	bic.w	r3, r3, #10
 800272c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	621a      	str	r2, [r3, #32]
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0210 	bic.w	r2, r3, #16
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	031b      	lsls	r3, r3, #12
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800278a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f043 0307 	orr.w	r3, r3, #7
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	021a      	lsls	r2, r3, #8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	431a      	orrs	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800283c:	2302      	movs	r3, #2
 800283e:	e065      	b.n	800290c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800287a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002890:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d013      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d10c      	bne.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40013400 	.word	0x40013400
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40014000 	.word	0x40014000

0800292c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e042      	b.n	80029c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7fe f915 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2224      	movs	r2, #36	; 0x24
 800295a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8c2 	bl	8002af8 <UART_SetConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e022      	b.n	80029c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fb82 	bl	8003090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800299a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fc09 	bl	80031d4 <UART_CheckIdleState>
 80029c2:	4603      	mov	r3, r0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	f040 8083 	bne.w	8002aee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_UART_Transmit+0x28>
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e07b      	b.n	8002af0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x3a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e074      	b.n	8002af0 <HAL_UART_Transmit+0x124>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2221      	movs	r2, #33	; 0x21
 8002a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fa11 	bl	8000e44 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	88fa      	ldrh	r2, [r7, #6]
 8002a28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3c:	d108      	bne.n	8002a50 <HAL_UART_Transmit+0x84>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d104      	bne.n	8002a50 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	e003      	b.n	8002a58 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002a60:	e02c      	b.n	8002abc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fbfc 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e039      	b.n	8002af0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	3302      	adds	r3, #2
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	e007      	b.n	8002aaa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1cc      	bne.n	8002a62 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2140      	movs	r1, #64	; 0x40
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fbc9 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e006      	b.n	8002af0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b08c      	sub	sp, #48	; 0x30
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4bab      	ldr	r3, [pc, #684]	; (8002dd4 <UART_SetConfig+0x2dc>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4aa0      	ldr	r2, [pc, #640]	; (8002dd8 <UART_SetConfig+0x2e0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b60:	4313      	orrs	r3, r2
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002b6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f023 010f 	bic.w	r1, r3, #15
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a91      	ldr	r2, [pc, #580]	; (8002ddc <UART_SetConfig+0x2e4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d125      	bne.n	8002be8 <UART_SetConfig+0xf0>
 8002b9c:	4b90      	ldr	r3, [pc, #576]	; (8002de0 <UART_SetConfig+0x2e8>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d81a      	bhi.n	8002be0 <UART_SetConfig+0xe8>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <UART_SetConfig+0xb8>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd1 	.word	0x08002bd1
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bd9 	.word	0x08002bd9
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bc6:	e0d6      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bce:	e0d2      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd6:	e0ce      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002bd8:	2308      	movs	r3, #8
 8002bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bde:	e0ca      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002be0:	2310      	movs	r3, #16
 8002be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002be6:	e0c6      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a7d      	ldr	r2, [pc, #500]	; (8002de4 <UART_SetConfig+0x2ec>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d138      	bne.n	8002c64 <UART_SetConfig+0x16c>
 8002bf2:	4b7b      	ldr	r3, [pc, #492]	; (8002de0 <UART_SetConfig+0x2e8>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d82d      	bhi.n	8002c5c <UART_SetConfig+0x164>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <UART_SetConfig+0x110>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c3d 	.word	0x08002c3d
 8002c0c:	08002c5d 	.word	0x08002c5d
 8002c10:	08002c5d 	.word	0x08002c5d
 8002c14:	08002c5d 	.word	0x08002c5d
 8002c18:	08002c4d 	.word	0x08002c4d
 8002c1c:	08002c5d 	.word	0x08002c5d
 8002c20:	08002c5d 	.word	0x08002c5d
 8002c24:	08002c5d 	.word	0x08002c5d
 8002c28:	08002c45 	.word	0x08002c45
 8002c2c:	08002c5d 	.word	0x08002c5d
 8002c30:	08002c5d 	.word	0x08002c5d
 8002c34:	08002c5d 	.word	0x08002c5d
 8002c38:	08002c55 	.word	0x08002c55
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c42:	e098      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002c44:	2302      	movs	r3, #2
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c4a:	e094      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c52:	e090      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002c54:	2308      	movs	r3, #8
 8002c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c5a:	e08c      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c62:	e088      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a5f      	ldr	r2, [pc, #380]	; (8002de8 <UART_SetConfig+0x2f0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d125      	bne.n	8002cba <UART_SetConfig+0x1c2>
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <UART_SetConfig+0x2e8>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d016      	beq.n	8002caa <UART_SetConfig+0x1b2>
 8002c7c:	2b30      	cmp	r3, #48	; 0x30
 8002c7e:	d818      	bhi.n	8002cb2 <UART_SetConfig+0x1ba>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d00a      	beq.n	8002c9a <UART_SetConfig+0x1a2>
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d814      	bhi.n	8002cb2 <UART_SetConfig+0x1ba>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <UART_SetConfig+0x19a>
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d008      	beq.n	8002ca2 <UART_SetConfig+0x1aa>
 8002c90:	e00f      	b.n	8002cb2 <UART_SetConfig+0x1ba>
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c98:	e06d      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca0:	e069      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca8:	e065      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002caa:	2308      	movs	r3, #8
 8002cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb0:	e061      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb8:	e05d      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4b      	ldr	r2, [pc, #300]	; (8002dec <UART_SetConfig+0x2f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d125      	bne.n	8002d10 <UART_SetConfig+0x218>
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <UART_SetConfig+0x2e8>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cce:	2bc0      	cmp	r3, #192	; 0xc0
 8002cd0:	d016      	beq.n	8002d00 <UART_SetConfig+0x208>
 8002cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cd4:	d818      	bhi.n	8002d08 <UART_SetConfig+0x210>
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d00a      	beq.n	8002cf0 <UART_SetConfig+0x1f8>
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d814      	bhi.n	8002d08 <UART_SetConfig+0x210>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <UART_SetConfig+0x1f0>
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d008      	beq.n	8002cf8 <UART_SetConfig+0x200>
 8002ce6:	e00f      	b.n	8002d08 <UART_SetConfig+0x210>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cee:	e042      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cf6:	e03e      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cfe:	e03a      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d00:	2308      	movs	r3, #8
 8002d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d06:	e036      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d08:	2310      	movs	r3, #16
 8002d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d0e:	e032      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <UART_SetConfig+0x2e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d12a      	bne.n	8002d70 <UART_SetConfig+0x278>
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <UART_SetConfig+0x2e8>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d28:	d01a      	beq.n	8002d60 <UART_SetConfig+0x268>
 8002d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d2e:	d81b      	bhi.n	8002d68 <UART_SetConfig+0x270>
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d34:	d00c      	beq.n	8002d50 <UART_SetConfig+0x258>
 8002d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3a:	d815      	bhi.n	8002d68 <UART_SetConfig+0x270>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <UART_SetConfig+0x250>
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d008      	beq.n	8002d58 <UART_SetConfig+0x260>
 8002d46:	e00f      	b.n	8002d68 <UART_SetConfig+0x270>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d4e:	e012      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d50:	2302      	movs	r3, #2
 8002d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d56:	e00e      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d5e:	e00a      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d60:	2308      	movs	r3, #8
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d66:	e006      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d6e:	e002      	b.n	8002d76 <UART_SetConfig+0x27e>
 8002d70:	2310      	movs	r3, #16
 8002d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <UART_SetConfig+0x2e0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	f040 80a8 	bne.w	8002ed2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d834      	bhi.n	8002df4 <UART_SetConfig+0x2fc>
 8002d8a:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <UART_SetConfig+0x298>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002df5 	.word	0x08002df5
 8002d98:	08002dbd 	.word	0x08002dbd
 8002d9c:	08002df5 	.word	0x08002df5
 8002da0:	08002dc3 	.word	0x08002dc3
 8002da4:	08002df5 	.word	0x08002df5
 8002da8:	08002df5 	.word	0x08002df5
 8002dac:	08002df5 	.word	0x08002df5
 8002db0:	08002dcb 	.word	0x08002dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db4:	f7ff f858 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8002db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dba:	e021      	b.n	8002e00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <UART_SetConfig+0x2f8>)
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dc0:	e01e      	b.n	8002e00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7fe ffe3 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002dc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dc8:	e01a      	b.n	8002e00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dd0:	e016      	b.n	8002e00 <UART_SetConfig+0x308>
 8002dd2:	bf00      	nop
 8002dd4:	cfff69f3 	.word	0xcfff69f3
 8002dd8:	40008000 	.word	0x40008000
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40004400 	.word	0x40004400
 8002de8:	40004800 	.word	0x40004800
 8002dec:	40004c00 	.word	0x40004c00
 8002df0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002dfe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 812a 	beq.w	800305c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	4a9e      	ldr	r2, [pc, #632]	; (8003088 <UART_SetConfig+0x590>)
 8002e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e12:	461a      	mov	r2, r3
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d305      	bcc.n	8002e38 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d903      	bls.n	8002e40 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e3e:	e10d      	b.n	800305c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	2200      	movs	r2, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	60fa      	str	r2, [r7, #12]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	4a8e      	ldr	r2, [pc, #568]	; (8003088 <UART_SetConfig+0x590>)
 8002e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e62:	f7fd f9d9 	bl	8000218 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	020b      	lsls	r3, r1, #8
 8002e78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e7c:	0202      	lsls	r2, r0, #8
 8002e7e:	6979      	ldr	r1, [r7, #20]
 8002e80:	6849      	ldr	r1, [r1, #4]
 8002e82:	0849      	lsrs	r1, r1, #1
 8002e84:	2000      	movs	r0, #0
 8002e86:	460c      	mov	r4, r1
 8002e88:	4605      	mov	r5, r0
 8002e8a:	eb12 0804 	adds.w	r8, r2, r4
 8002e8e:	eb43 0905 	adc.w	r9, r3, r5
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	469a      	mov	sl, r3
 8002e9a:	4693      	mov	fp, r2
 8002e9c:	4652      	mov	r2, sl
 8002e9e:	465b      	mov	r3, fp
 8002ea0:	4640      	mov	r0, r8
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	f7fd f9b8 	bl	8000218 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4613      	mov	r3, r2
 8002eae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eb6:	d308      	bcc.n	8002eca <UART_SetConfig+0x3d2>
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ebe:	d204      	bcs.n	8002eca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	e0c8      	b.n	800305c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ed0:	e0c4      	b.n	800305c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eda:	d167      	bne.n	8002fac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d828      	bhi.n	8002f36 <UART_SetConfig+0x43e>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0x3f4>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f37 	.word	0x08002f37
 8002efc:	08002f27 	.word	0x08002f27
 8002f00:	08002f37 	.word	0x08002f37
 8002f04:	08002f37 	.word	0x08002f37
 8002f08:	08002f37 	.word	0x08002f37
 8002f0c:	08002f2f 	.word	0x08002f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f10:	f7fe ffaa 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8002f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f16:	e014      	b.n	8002f42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f18:	f7fe ffbc 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f1e:	e010      	b.n	8002f42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <UART_SetConfig+0x594>)
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f24:	e00d      	b.n	8002f42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f26:	f7fe ff31 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f2c:	e009      	b.n	8002f42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f34:	e005      	b.n	8002f42 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8089 	beq.w	800305c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	4a4e      	ldr	r2, [pc, #312]	; (8003088 <UART_SetConfig+0x590>)
 8002f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f54:	461a      	mov	r2, r3
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f5c:	005a      	lsls	r2, r3, #1
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	441a      	add	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	d916      	bls.n	8002fa4 <UART_SetConfig+0x4ac>
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d212      	bcs.n	8002fa4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f023 030f 	bic.w	r3, r3, #15
 8002f86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	8bfb      	ldrh	r3, [r7, #30]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	8bfa      	ldrh	r2, [r7, #30]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	e05b      	b.n	800305c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002faa:	e057      	b.n	800305c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d828      	bhi.n	8003006 <UART_SetConfig+0x50e>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <UART_SetConfig+0x4c4>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002fe9 	.word	0x08002fe9
 8002fc4:	08002ff1 	.word	0x08002ff1
 8002fc8:	08003007 	.word	0x08003007
 8002fcc:	08002ff7 	.word	0x08002ff7
 8002fd0:	08003007 	.word	0x08003007
 8002fd4:	08003007 	.word	0x08003007
 8002fd8:	08003007 	.word	0x08003007
 8002fdc:	08002fff 	.word	0x08002fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f7fe ff42 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fe6:	e014      	b.n	8003012 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe8:	f7fe ff54 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fee:	e010      	b.n	8003012 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <UART_SetConfig+0x594>)
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ff4:	e00d      	b.n	8003012 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff6:	f7fe fec9 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002ffa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ffc:	e009      	b.n	8003012 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003004:	e005      	b.n	8003012 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003010:	bf00      	nop
    }

    if (pclk != 0U)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d021      	beq.n	800305c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <UART_SetConfig+0x590>)
 800301e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003022:	461a      	mov	r2, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	fbb3 f2f2 	udiv	r2, r3, r2
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	441a      	add	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d909      	bls.n	8003056 <UART_SetConfig+0x55e>
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d205      	bcs.n	8003056 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	b29a      	uxth	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e002      	b.n	800305c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2201      	movs	r2, #1
 8003060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2201      	movs	r2, #1
 8003068:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2200      	movs	r2, #0
 8003076:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003078:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800307c:	4618      	mov	r0, r3
 800307e:	3730      	adds	r7, #48	; 0x30
 8003080:	46bd      	mov	sp, r7
 8003082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003086:	bf00      	nop
 8003088:	08003688 	.word	0x08003688
 800308c:	00f42400 	.word	0x00f42400

08003090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01a      	beq.n	80031a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318e:	d10a      	bne.n	80031a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af02      	add	r7, sp, #8
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031e4:	f7fd fe2e 	bl	8000e44 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d10e      	bne.n	8003216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f82f 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e025      	b.n	8003262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d10e      	bne.n	8003242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f819 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e00f      	b.n	8003262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b09c      	sub	sp, #112	; 0x70
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	e0a9      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003282:	f000 80a5 	beq.w	80033d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003286:	f7fd fddd 	bl	8000e44 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003292:	429a      	cmp	r2, r3
 8003294:	d302      	bcc.n	800329c <UART_WaitOnFlagUntilTimeout+0x32>
 8003296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003298:	2b00      	cmp	r3, #0
 800329a:	d140      	bne.n	800331e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032b0:	667b      	str	r3, [r7, #100]	; 0x64
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e6      	bne.n	800329c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3308      	adds	r3, #8
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3308      	adds	r3, #8
 80032ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e069      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d051      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333a:	d149      	bne.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003344:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800335a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
 8003366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800336a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1e6      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3308      	adds	r3, #8
 800337e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	613b      	str	r3, [r7, #16]
   return(result);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3308      	adds	r3, #8
 8003396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003398:	623a      	str	r2, [r7, #32]
 800339a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	69f9      	ldr	r1, [r7, #28]
 800339e:	6a3a      	ldr	r2, [r7, #32]
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e010      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f43f af46 	beq.w	800327c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3770      	adds	r7, #112	; 0x70
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_UARTEx_DisableFifoMode+0x16>
 800340c:	2302      	movs	r3, #2
 800340e:	e027      	b.n	8003460 <HAL_UARTEx_DisableFifoMode+0x66>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800343e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e02d      	b.n	80034e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2224      	movs	r2, #36	; 0x24
 8003490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f84f 	bl	8003564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e02d      	b.n	800355c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f811 	bl	8003564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003570:	2b00      	cmp	r3, #0
 8003572:	d108      	bne.n	8003586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003584:	e031      	b.n	80035ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003586:	2308      	movs	r3, #8
 8003588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800358a:	2308      	movs	r3, #8
 800358c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	0e5b      	lsrs	r3, r3, #25
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	0f5b      	lsrs	r3, r3, #29
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035ae:	7bbb      	ldrb	r3, [r7, #14]
 80035b0:	7b3a      	ldrb	r2, [r7, #12]
 80035b2:	4911      	ldr	r1, [pc, #68]	; (80035f8 <UARTEx_SetNbDataToProcess+0x94>)
 80035b4:	5c8a      	ldrb	r2, [r1, r2]
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80035ba:	7b3a      	ldrb	r2, [r7, #12]
 80035bc:	490f      	ldr	r1, [pc, #60]	; (80035fc <UARTEx_SetNbDataToProcess+0x98>)
 80035be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	7b7a      	ldrb	r2, [r7, #13]
 80035d0:	4909      	ldr	r1, [pc, #36]	; (80035f8 <UARTEx_SetNbDataToProcess+0x94>)
 80035d2:	5c8a      	ldrb	r2, [r1, r2]
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80035d8:	7b7a      	ldrb	r2, [r7, #13]
 80035da:	4908      	ldr	r1, [pc, #32]	; (80035fc <UARTEx_SetNbDataToProcess+0x98>)
 80035dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035de:	fb93 f3f2 	sdiv	r3, r3, r2
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	080036a0 	.word	0x080036a0
 80035fc:	080036a8 	.word	0x080036a8

08003600 <memset>:
 8003600:	4402      	add	r2, r0
 8003602:	4603      	mov	r3, r0
 8003604:	4293      	cmp	r3, r2
 8003606:	d100      	bne.n	800360a <memset+0xa>
 8003608:	4770      	bx	lr
 800360a:	f803 1b01 	strb.w	r1, [r3], #1
 800360e:	e7f9      	b.n	8003604 <memset+0x4>

08003610 <__libc_init_array>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	4d0d      	ldr	r5, [pc, #52]	; (8003648 <__libc_init_array+0x38>)
 8003614:	4c0d      	ldr	r4, [pc, #52]	; (800364c <__libc_init_array+0x3c>)
 8003616:	1b64      	subs	r4, r4, r5
 8003618:	10a4      	asrs	r4, r4, #2
 800361a:	2600      	movs	r6, #0
 800361c:	42a6      	cmp	r6, r4
 800361e:	d109      	bne.n	8003634 <__libc_init_array+0x24>
 8003620:	4d0b      	ldr	r5, [pc, #44]	; (8003650 <__libc_init_array+0x40>)
 8003622:	4c0c      	ldr	r4, [pc, #48]	; (8003654 <__libc_init_array+0x44>)
 8003624:	f000 f818 	bl	8003658 <_init>
 8003628:	1b64      	subs	r4, r4, r5
 800362a:	10a4      	asrs	r4, r4, #2
 800362c:	2600      	movs	r6, #0
 800362e:	42a6      	cmp	r6, r4
 8003630:	d105      	bne.n	800363e <__libc_init_array+0x2e>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	f855 3b04 	ldr.w	r3, [r5], #4
 8003638:	4798      	blx	r3
 800363a:	3601      	adds	r6, #1
 800363c:	e7ee      	b.n	800361c <__libc_init_array+0xc>
 800363e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003642:	4798      	blx	r3
 8003644:	3601      	adds	r6, #1
 8003646:	e7f2      	b.n	800362e <__libc_init_array+0x1e>
 8003648:	080036b8 	.word	0x080036b8
 800364c:	080036b8 	.word	0x080036b8
 8003650:	080036b8 	.word	0x080036b8
 8003654:	080036bc 	.word	0x080036bc

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
